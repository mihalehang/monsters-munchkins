;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname |Traditional Algo munchkins|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; Direction statement
(define (move mon mun side)
  (list 'move mon 'monsters 'and mun 'munchkins 'to 'the side))

; algorithm helper
(define (helper lc b rc)
  (cond 
   ((and (> (second lc) 4)
         (equal? (second b) 'left)) (cons (move 2 2 'right)
                                         (helper (list (- (first lc) 2) 
                                                       (- (second lc) 2))
                                                 (list 4 'right)
                                                 (list (+ (first rc) 2)
                                                       (+ (second rc) 2)))))
   ((and (> (second lc) 0)
         (equal? (second b) 'right)) (cons (move 1 1 'left)
                                         (helper (list (+ (first lc) 1) 
                                                       (+ (second lc) 1))
                                                 (list 4 'left)
                                                 (list (- (first rc) 1)
                                                       (- (second rc) 1)))))
   ((and (= (second lc) 4)
         (equal? (second b) 'left)) (cons (move 0 4 'right)
                                         (helper (list (first lc)
                                                       (- (second lc) 4))
                                                 (list 4 'right)
                                                 (list (first rc)
                                                       (+ (second rc) 4)))))
   ((and (> (first lc) 4)
         (equal? (second b) 'left)) (cons (move 4 0 'right)
                                         (helper (list (- (first lc) 4)
                                                       (second lc))
                                                 (list 4 'right)
                                                 (list (+ (first rc) 4)
                                                       (second rc)))))
   ((and (<= (first lc) 4)
         (equal? (second b) 'left)) (list (move (first lc) 0 'right)))
   (else (cons (move 1 0 'left)
            (helper (list (+ (first lc) 1)
                          (second lc))
                    (list 4 'left)
                    (list (- (first rc) 1)
                          (second rc)))))))
            

;; main algorithm
(define (tradalg lc b rc)
  (cond 
   ((and (= (first lc) 0) (= (second lc) 0)) '())
   ((and (<= (+ (first lc) (second lc)) 4)
         (equal? (second b) 'left)) (move (first lc) (second lc) 'right))
   ((= (second lc) 3) (list (move 2 2 'right)
                            (move 1 1 'left)
                            (move 2 2 'right)))
   ((= (second lc) 4) (list (move 2 2 'right)
                            (move 1 1 'left)
                            (move 2 2 'right)
                            (move 1 1 'left)
                            (move 2 2 'right)))
   (else (helper lc b rc))))